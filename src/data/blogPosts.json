[
  {
    "id": 1,
    "title": "Building Responsive Websites with TailwindCSS",
    "slug": "building-responsive-websites-tailwindcss",
    "excerpt": "Learn how to create fully responsive websites quickly and efficiently using TailwindCSS utility classes.",
    "content": "# Building Responsive Websites with TailwindCSS\n\nTailwindCSS has revolutionized the way we approach CSS development. Instead of writing custom CSS for every component, Tailwind provides utility classes that can be composed to create any design directly in your HTML.\n\n## Why Choose TailwindCSS?\n\n1. **Utility-First Approach**: Build complex components by composing simple utilities\n2. **Responsive Design**: Built-in responsive design utilities\n3. **Customization**: Highly customizable design system\n4. **Performance**: Purge unused CSS in production\n\n## Getting Started\n\nFirst, install TailwindCSS in your project:\n\n```bash\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n## Responsive Design Patterns\n\nTailwind makes responsive design incredibly easy with its mobile-first approach:\n\n```html\n<div class=\"w-full md:w-1/2 lg:w-1/3\">\n  <!-- Content adapts to screen size -->\n</div>\n```\n\n## Best Practices\n\n- Use component extraction for repeated patterns\n- Leverage Tailwind's design tokens\n- Optimize for production with purging\n- Customize your color palette\n\n## Conclusion\n\nTailwindCSS provides an excellent developer experience while maintaining performance and flexibility. It's perfect for modern web development workflows.",
    "date": "May 15, 2025",
    "readTime": 5,
    "author": "Gia Si",
    "category": "Web Development",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=TailwindCSS",
    "tags": ["TailwindCSS", "CSS", "Responsive Design"]
  },
  {
    "id": 2,
    "title": "Introduction to Three.js for Web Developers",
    "slug": "introduction-to-threejs",
    "excerpt": "Discover how to incorporate 3D graphics into your web projects using the powerful Three.js library.",
    "content": "# Introduction to Three.js for Web Developers\n\nThree.js is a powerful JavaScript library that makes creating 3D graphics on the web accessible to developers of all skill levels. Whether you want to create interactive visualizations, games, or immersive experiences, Three.js provides the tools you need.\n\n## What is Three.js?\n\nThree.js is a cross-browser JavaScript library that uses WebGL to create and display animated 3D computer graphics in a web browser. It abstracts the complexity of WebGL and provides a simple, intuitive API.\n\n## Core Concepts\n\n### Scene, Camera, Renderer\n\nEvery Three.js application needs these three fundamental components:\n\n```javascript\n// Create scene\nconst scene = new THREE.Scene();\n\n// Create camera\nconst camera = new THREE.PerspectiveCamera(\n  75, window.innerWidth / window.innerHeight, 0.1, 1000\n);\n\n// Create renderer\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n\n## Creating Your First 3D Object\n\n```javascript\n// Create geometry\nconst geometry = new THREE.BoxGeometry();\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\nconst cube = new THREE.Mesh(geometry, material);\n\n// Add to scene\nscene.add(cube);\n\n// Position camera\ncamera.position.z = 5;\n\n// Render loop\nfunction animate() {\n  requestAnimationFrame(animate);\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n}\nanimate();\n```\n\n## Advanced Features\n\n- **Lighting**: Ambient, directional, point, and spot lights\n- **Materials**: PBR materials for realistic rendering\n- **Animations**: Keyframe animations and tweening\n- **Physics**: Integration with physics engines\n\n## Performance Tips\n\n1. Optimize geometry complexity\n2. Use efficient materials\n3. Implement frustum culling\n4. Minimize draw calls\n5. Use texture atlases\n\n## Conclusion\n\nThree.js opens up a world of possibilities for web developers. Start with simple scenes and gradually build up to more complex applications. The community and documentation are excellent resources for learning.",
    "date": "April 28, 2025",
    "readTime": 8,
    "author": "Gia Si",
    "category": "3D Graphics",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=Three.js",
    "tags": ["Three.js", "WebGL", "3D", "JavaScript"]
  },
  {
    "id": 3,
    "title": "Optimizing React Performance",
    "slug": "optimizing-react-performance",
    "excerpt": "Tips and techniques to improve your React application performance and provide a smoother user experience.",
    "content": "# Optimizing React Performance\n\nReact applications can become slow as they grow in complexity. Understanding performance optimization techniques is crucial for maintaining a smooth user experience.\n\n## Understanding React Rendering\n\nReact re-renders components when:\n- State changes\n- Props change\n- Parent component re-renders\n- Context value changes\n\n## Key Optimization Techniques\n\n### 1. Use React.memo\n\n```jsx\nconst ExpensiveComponent = React.memo(({ data }) => {\n  return (\n    <div>\n      {/* Expensive rendering logic */}\n    </div>\n  );\n});\n```\n\n### 2. Optimize with useCallback\n\n```jsx\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n  \n  const handleClick = useCallback(() => {\n    setCount(c => c + 1);\n  }, []);\n  \n  return <Button onClick={handleClick} />;\n};\n```\n\n### 3. Memoize Expensive Calculations\n\n```jsx\nconst ExpensiveCalculation = ({ items }) => {\n  const expensiveValue = useMemo(() => {\n    return items.reduce((sum, item) => sum + item.value, 0);\n  }, [items]);\n  \n  return <div>{expensiveValue}</div>;\n};\n```\n\n## Code Splitting\n\nUse React.lazy() for component-level code splitting:\n\n```jsx\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <LazyComponent />\n    </Suspense>\n  );\n}\n```\n\n## Virtual Scrolling\n\nFor large lists, implement virtual scrolling:\n\n```jsx\nimport { FixedSizeList as List } from 'react-window';\n\nconst VirtualizedList = ({ items }) => (\n  <List\n    height={600}\n    itemCount={items.length}\n    itemSize={50}\n  >\n    {({ index, style }) => (\n      <div style={style}>\n        {items[index].name}\n      </div>\n    )}\n  </List>\n);\n```\n\n## Performance Monitoring\n\nUse React DevTools Profiler to identify performance bottlenecks and measure the impact of your optimizations.\n\n## Best Practices\n\n1. Avoid creating objects in render\n2. Use proper key props in lists\n3. Minimize context re-renders\n4. Implement error boundaries\n5. Use production builds for deployment\n\n## Conclusion\n\nReact performance optimization is about understanding when and why re-renders happen, then applying the right techniques to minimize unnecessary work. Start with measuring, then optimize based on actual bottlenecks.",
    "date": "April 10, 2025",
    "readTime": 6,
    "author": "Gia Si",
    "category": "React",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=React",
    "tags": ["React", "Performance", "JavaScript"]
  },
  {
    "id": 4,
    "title": "Getting Started with GSAP Animations",
    "slug": "getting-started-with-gsap",
    "excerpt": "Learn how to create smooth, professional animations using the GSAP library in your web projects.",
    "content": "# Getting Started with GSAP Animations\n\nGSAP (GreenSock Animation Platform) is the industry standard for web animations. It's fast, flexible, and works across all browsers, making it the perfect choice for professional web animations.\n\n## Why Choose GSAP?\n\n- **Performance**: Hardware accelerated animations\n- **Browser Support**: Works on all browsers\n- **Ease of Use**: Intuitive API\n- **Flexibility**: Animate any property\n- **Timeline Control**: Complex sequence management\n\n## Installation\n\n```bash\nnpm install gsap\n```\n\n## Basic Animations\n\n### Simple Tween\n\n```javascript\nimport { gsap } from 'gsap';\n\n// Animate element to new position\ngsap.to('.my-element', {\n  duration: 2,\n  x: 100,\n  y: 50,\n  rotation: 360,\n  ease: 'bounce.out'\n});\n```\n\n### From Animation\n\n```javascript\n// Animate from specific values\ngsap.from('.my-element', {\n  duration: 1,\n  opacity: 0,\n  scale: 0.5,\n  ease: 'power2.out'\n});\n```\n\n## Timeline Animations\n\n```javascript\nconst tl = gsap.timeline();\n\ntl.from('.header', { duration: 1, y: -50, opacity: 0 })\n  .from('.nav', { duration: 0.5, x: -100, opacity: 0 }, '-=0.5')\n  .from('.content', { duration: 1, y: 50, opacity: 0 }, '-=0.3');\n```\n\n## Advanced Features\n\n### ScrollTrigger\n\n```javascript\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\ngsap.registerPlugin(ScrollTrigger);\n\ngsap.to('.parallax', {\n  y: -100,\n  scrollTrigger: {\n    trigger: '.parallax',\n    start: 'top bottom',\n    end: 'bottom top',\n    scrub: true\n  }\n});\n```\n\n### Morphing SVG\n\n```javascript\ngsap.to('#morphing-path', {\n  duration: 2,\n  morphSVG: '#target-path',\n  ease: 'power2.inOut'\n});\n```\n\n## Performance Tips\n\n1. Use transform properties (x, y, scale, rotation)\n2. Avoid animating layout properties\n3. Use `will-change` CSS property\n4. Batch DOM reads and writes\n5. Use GSAP's `set()` method for instant changes\n\n## Best Practices\n\n- Plan your animations before coding\n- Use easing functions appropriately\n- Consider reduced motion preferences\n- Test on various devices\n- Keep animations purposeful\n\n## Conclusion\n\nGSAP provides powerful tools for creating professional web animations. Start with simple tweens and gradually explore timelines, scroll-triggered animations, and advanced features. The investment in learning GSAP pays off with smoother, more engaging user experiences.",
    "date": "March 22, 2025",
    "readTime": 7,
    "author": "Gia Si",
    "category": "Animations",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=GSAP",
    "tags": ["GSAP", "Animations", "JavaScript"]
  },
  {
    "id": 5,
    "title": "Building a Portfolio with React and Vite",
    "slug": "building-portfolio-react-vite",
    "excerpt": "Step-by-step guide to creating a modern developer portfolio using React and Vite build tools.",
    "content": "# Building a Portfolio with React and Vite\n\nCreating a developer portfolio is essential for showcasing your skills and attracting potential employers or clients. This guide will walk you through building a modern, responsive portfolio using React and Vite.\n\n## Why React and Vite?\n\n- **React**: Component-based architecture, large ecosystem\n- **Vite**: Lightning-fast development server, optimized builds\n- **Modern Tooling**: Hot module replacement, TypeScript support\n\n## Project Setup\n\n```bash\n# Create new Vite project\nnpm create vite@latest my-portfolio -- --template react\ncd my-portfolio\nnpm install\n\n# Add additional dependencies\nnpm install react-router-dom framer-motion tailwindcss\n```\n\n## Project Structure\n\n```\nsrc/\n├── components/\n│   ├── Header/\n│   ├── About/\n│   ├── Projects/\n│   ├── Contact/\n│   └── Layout/\n├── pages/\n├── data/\n├── utils/\n└── styles/\n```\n\n## Essential Components\n\n### Navigation Component\n\n```jsx\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\n\nconst Navigation = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const navItems = ['About', 'Projects', 'Blog', 'Contact'];\n  \n  return (\n    <motion.nav \n      className=\"fixed top-0 w-full z-50 bg-white/90 backdrop-blur-md\"\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n    >\n      {/* Navigation content */}\n    </motion.nav>\n  );\n};\n```\n\n### Project Showcase\n\n```jsx\nconst ProjectCard = ({ project }) => {\n  return (\n    <motion.div\n      className=\"bg-white rounded-lg shadow-lg overflow-hidden\"\n      whileHover={{ scale: 1.05 }}\n      transition={{ duration: 0.3 }}\n    >\n      <img src={project.image} alt={project.title} />\n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-bold\">{project.title}</h3>\n        <p className=\"text-gray-600\">{project.description}</p>\n        <div className=\"flex gap-2 mt-4\">\n          {project.technologies.map(tech => (\n            <span key={tech} className=\"px-2 py-1 bg-blue-100 rounded\">\n              {tech}\n            </span>\n          ))}\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n```\n\n## Responsive Design\n\nUse Tailwind's responsive utilities:\n\n```jsx\n<div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n  {/* Responsive grid */}\n</div>\n```\n\n## Performance Optimization\n\n### Code Splitting\n\n```jsx\nimport { lazy, Suspense } from 'react';\n\nconst Projects = lazy(() => import('./components/Projects'));\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Projects />\n    </Suspense>\n  );\n}\n```\n\n### Image Optimization\n\n```jsx\nconst OptimizedImage = ({ src, alt, className }) => {\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      loading=\"lazy\"\n      decoding=\"async\"\n    />\n  );\n};\n```\n\n## SEO Considerations\n\n- Use semantic HTML\n- Add meta tags\n- Implement Open Graph tags\n- Create a sitemap\n- Use proper heading hierarchy\n\n## Deployment\n\n### Vercel Deployment\n\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy\nvercel\n```\n\n### Build Optimization\n\n```javascript\n// vite.config.js\nexport default {\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          animations: ['framer-motion']\n        }\n      }\n    }\n  }\n};\n```\n\n## Best Practices\n\n1. Keep design clean and professional\n2. Showcase your best work\n3. Include contact information\n4. Add loading states\n5. Test on mobile devices\n6. Use analytics to track visitors\n\n## Conclusion\n\nBuilding a portfolio with React and Vite gives you a modern, fast, and maintainable website. Focus on showcasing your skills through quality projects and clean code. Remember to keep it updated with your latest work!",
    "date": "March 5, 2025",
    "readTime": 10,
    "author": "Gia Si",
    "category": "React",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=Portfolio",
    "tags": ["React", "Vite", "Portfolio"]
  },
  {
    "id": 6,
    "title": "Modern CSS Techniques Every Developer Should Know",
    "slug": "modern-css-techniques",
    "excerpt": "Explore the latest CSS features and techniques that can improve your web development workflow.",
    "content": "# Modern CSS Techniques Every Developer Should Know\n\nCSS has evolved significantly in recent years, introducing powerful features that make styling more efficient and maintainable. Let's explore the modern techniques every developer should master.\n\n## CSS Grid Layout\n\nCSS Grid provides a two-dimensional layout system that's perfect for complex layouts:\n\n```css\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  grid-gap: 2rem;\n  grid-template-areas:\n    'header header header'\n    'sidebar main aside'\n    'footer footer footer';\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n## CSS Custom Properties (Variables)\n\nCustom properties make themes and consistent styling much easier:\n\n```css\n:root {\n  --primary-color: #3b82f6;\n  --secondary-color: #8b5cf6;\n  --text-color: #1f2937;\n  --spacing-unit: 1rem;\n}\n\n.button {\n  background-color: var(--primary-color);\n  color: white;\n  padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit);\n}\n\n/* Dark theme */\n[data-theme=\"dark\"] {\n  --text-color: #f9fafb;\n  --background-color: #111827;\n}\n```\n\n## Container Queries\n\nStyle components based on their container size, not viewport size:\n\n```css\n.card-container {\n  container-type: inline-size;\n}\n\n@container (min-width: 400px) {\n  .card {\n    display: flex;\n    flex-direction: row;\n  }\n}\n\n@container (max-width: 399px) {\n  .card {\n    display: flex;\n    flex-direction: column;\n  }\n}\n```\n\n## CSS Subgrid\n\nAlign nested grid items with parent grid:\n\n```css\n.parent-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 1rem;\n}\n\n.child-grid {\n  display: grid;\n  grid-column: span 2;\n  grid-template-columns: subgrid;\n}\n```\n\n## Modern Pseudo-selectors\n\n### :has() Selector\n\n```css\n/* Style cards that contain images */\n.card:has(img) {\n  border: 2px solid var(--primary-color);\n}\n\n/* Style form with errors */\n.form:has(.error) {\n  border-color: red;\n}\n```\n\n### :is() and :where()\n\n```css\n/* Traditional way */\nh1, h2, h3, h4, h5, h6 {\n  font-family: var(--heading-font);\n}\n\n/* Modern way */\n:is(h1, h2, h3, h4, h5, h6) {\n  font-family: var(--heading-font);\n}\n\n/* :where() has zero specificity */\n:where(h1, h2, h3) {\n  margin-top: 0;\n}\n```\n\n## CSS Functions\n\n### clamp()\n\n```css\n/* Responsive typography */\nh1 {\n  font-size: clamp(1.5rem, 4vw, 3rem);\n}\n\n/* Responsive spacing */\n.container {\n  padding: clamp(1rem, 5vw, 3rem);\n}\n```\n\n### min() and max()\n\n```css\n.responsive-width {\n  width: min(90%, 1200px);\n}\n\n.flexible-height {\n  height: max(50vh, 400px);\n}\n```\n\n## CSS Logical Properties\n\nUse logical properties for better internationalization:\n\n```css\n/* Instead of margin-left */\n.element {\n  margin-inline-start: 1rem;\n}\n\n/* Instead of border-top */\n.element {\n  border-block-start: 1px solid #ccc;\n}\n\n/* Instead of width and height */\n.element {\n  inline-size: 100%;\n  block-size: 300px;\n}\n```\n\n## CSS Nesting\n\n```css\n.card {\n  background: white;\n  border-radius: 8px;\n  \n  & .title {\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n  \n  & .content {\n    padding: 1rem;\n    \n    & p {\n      margin-bottom: 1rem;\n    }\n  }\n  \n  &:hover {\n    transform: translateY(-2px);\n  }\n}\n```\n\n## CSS Animations and Transitions\n\n### Scroll-driven Animations\n\n```css\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-on-scroll {\n  animation: fadeInUp linear;\n  animation-timeline: view();\n  animation-range: entry 0% entry 100%;\n}\n```\n\n### View Transitions API\n\n```css\n::view-transition-old(root),\n::view-transition-new(root) {\n  animation-duration: 0.3s;\n}\n\n::view-transition-old(root) {\n  animation-name: slide-out;\n}\n\n::view-transition-new(root) {\n  animation-name: slide-in;\n}\n```\n\n## Performance Considerations\n\n- Use `transform` and `opacity` for animations\n- Leverage `will-change` property sparingly\n- Use `contain` property for performance isolation\n- Implement critical CSS for faster loading\n\n## Browser Support\n\nAlways check browser support for modern features:\n\n```css\n@supports (display: grid) {\n  .layout {\n    display: grid;\n  }\n}\n\n@supports not (display: grid) {\n  .layout {\n    display: flex;\n  }\n}\n```\n\n## Conclusion\n\nThese modern CSS techniques provide powerful tools for creating efficient, maintainable stylesheets. Start incorporating them into your projects to improve both developer experience and user experience. Remember to check browser support and provide fallbacks when necessary.",
    "date": "February 18, 2025",
    "readTime": 6,
    "author": "Gia Si",
    "category": "CSS",
    "coverImage": "https://placehold.co/600x400/0f172a/0ea5e9?text=Modern+CSS",
    "tags": ["CSS", "Web Development"]
  }
]
